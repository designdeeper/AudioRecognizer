 import UIKit
import AudioToolbox

class AudioAnalyzer {
    
    func testAudio() {
        print("Testing audio...")
        do {
            var audioQueue: AudioQueueRef?
            var audioFormat = AudioStreamBasicDescription(
                mSampleRate: 44100.0,
                mFormatID: kAudioFormatLinearPCM,
                mFormatFlags: kAudioFormatFlagIsSignedInteger | kAudioFormatFlagIsPacked,
                mBytesPerPacket: 2,
                mFramesPerPacket: 1,
                mBytesPerFrame: 2,
                mChannelsPerFrame: 1,
                mBitsPerChannel: 16,
                mReserved: 0
            )
    
            // Set up audio queue
            try checkError(AudioQueueNewInput(&audioFormat, { (_, _, _, _, _, _) in }, nil, nil, nil, 0, &audioQueue))
    
            // Start recording
            try checkError(AudioQueueStart(audioQueue!, nil))
    
            // Wait for recording to finish
            Thread.sleep(forTimeInterval: 5)
    
            // Stop recording
            try checkError(AudioQueueStop(audioQueue!, true))
    
            // Check if any audio was recorded
            print("Analyzing audio...")
            if let audioData = try? Data(contentsOf: recorder.url) {
                let isMusicPlaying = analyzeAudio(audioData: audioData)
                if isMusicPlaying {
                    print("I hear music.")
                } else {
                    print("I don't hear any music.")
                }
            } else {
                print("No audio recorded")
            }
        } catch {
            print("An error occurred:", error)
        }
    }
    
    func checkError(_ status: OSStatus) throws {
        guard status == noErr else {
            throw NSError(domain: NSOSStatusErrorDomain, code: Int(status), userInfo: nil)
        }
    }
    
    func analyzeAudio(audioData: Data) -> Bool {
        guard let maxAmplitude = getMaxAmplitude(from: audioData) else {
            return false // Unable to analyze audio
        }
        return maxAmplitude > 500 // Adjust this threshold as needed
    }
    
    func getMaxAmplitude(from audioData: Data) -> Int16? {
        guard let pointer = audioData.withUnsafeBytes({ $0.baseAddress?.assumingMemoryBound(to: Int16.self) }) else {
            return nil
        }
        let samples = UnsafeBufferPointer(start: pointer, count: audioData.count / MemoryLayout<Int16>.stride)
        return samples.max()
    }
    
    func main() {
        let answer = readLine()?.lowercased() ?? ""
        if answer == "y" {
            testAudio()
        } else if answer == "n" {
            print("Exiting program.")
        } else {
            print("Invalid input. Please enter Y or N.")
        }
    }
    
}

// Usage
let audioAnalyzer = AudioAnalyzer()
audioAnalyzer.main()
